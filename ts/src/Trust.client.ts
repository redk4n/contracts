/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, TrustScoreParams, ExecuteMsg, ReviewResult, QueryMsg, Addr, AccountsResponse, ConfigResponse, Config, Timestamp, Uint64, PendingReviewResponse, PendingReview, PendingReviewsResponse, StakeAmountResponse, Decimal, TrustInfoResponse, TrustInfo, TrustData } from "./Trust.types";
export interface TrustReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  trustInfo: ({
    address
  }: {
    address: string;
  }) => Promise<TrustInfoResponse>;
  stakeAmount: ({
    address
  }: {
    address: string;
  }) => Promise<StakeAmountResponse>;
  accounts: () => Promise<AccountsResponse>;
  pendingReview: ({
    peer
  }: {
    peer: string;
  }) => Promise<PendingReviewResponse>;
  pendingReviewsByReviewer: ({
    reviewer
  }: {
    reviewer: string;
  }) => Promise<PendingReviewsResponse>;
}
export class TrustQueryClient implements TrustReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.trustInfo = this.trustInfo.bind(this);
    this.stakeAmount = this.stakeAmount.bind(this);
    this.accounts = this.accounts.bind(this);
    this.pendingReview = this.pendingReview.bind(this);
    this.pendingReviewsByReviewer = this.pendingReviewsByReviewer.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  trustInfo = async ({
    address
  }: {
    address: string;
  }): Promise<TrustInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      trust_info: {
        address
      }
    });
  };
  stakeAmount = async ({
    address
  }: {
    address: string;
  }): Promise<StakeAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stake_amount: {
        address
      }
    });
  };
  accounts = async (): Promise<AccountsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      accounts: {}
    });
  };
  pendingReview = async ({
    peer
  }: {
    peer: string;
  }): Promise<PendingReviewResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_review: {
        peer
      }
    });
  };
  pendingReviewsByReviewer = async ({
    reviewer
  }: {
    reviewer: string;
  }): Promise<PendingReviewsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_reviews_by_reviewer: {
        reviewer
      }
    });
  };
}
export interface TrustInterface extends TrustReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    admin,
    commerceCodeId,
    maintainer,
    maxRating,
    maxStakedDays,
    maxStakedTokens,
    reviewInterval,
    stakingContract,
    trustScoreParams
  }: {
    admin: string;
    commerceCodeId: number;
    maintainer: string;
    maxRating: number;
    maxStakedDays: number;
    maxStakedTokens: Uint128;
    reviewInterval: number;
    stakingContract: string;
    trustScoreParams: TrustScoreParams;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateStakingInfo: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  registerPendingReview: ({
    orderId,
    peer,
    reviewer
  }: {
    orderId: number;
    peer: string;
    reviewer: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  review: ({
    address,
    review
  }: {
    address: string;
    review: ReviewResult;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TrustClient extends TrustQueryClient implements TrustInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.updateStakingInfo = this.updateStakingInfo.bind(this);
    this.registerPendingReview = this.registerPendingReview.bind(this);
    this.review = this.review.bind(this);
  }

  updateConfig = async ({
    admin,
    commerceCodeId,
    maintainer,
    maxRating,
    maxStakedDays,
    maxStakedTokens,
    reviewInterval,
    stakingContract,
    trustScoreParams
  }: {
    admin: string;
    commerceCodeId: number;
    maintainer: string;
    maxRating: number;
    maxStakedDays: number;
    maxStakedTokens: Uint128;
    reviewInterval: number;
    stakingContract: string;
    trustScoreParams: TrustScoreParams;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        commerce_code_id: commerceCodeId,
        maintainer,
        max_rating: maxRating,
        max_staked_days: maxStakedDays,
        max_staked_tokens: maxStakedTokens,
        review_interval: reviewInterval,
        staking_contract: stakingContract,
        trust_score_params: trustScoreParams
      }
    }, fee, memo, funds);
  };
  updateStakingInfo = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_staking_info: {
        address
      }
    }, fee, memo, funds);
  };
  registerPendingReview = async ({
    orderId,
    peer,
    reviewer
  }: {
    orderId: number;
    peer: string;
    reviewer: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_pending_review: {
        order_id: orderId,
        peer,
        reviewer
      }
    }, fee, memo, funds);
  };
  review = async ({
    address,
    review
  }: {
    address: string;
    review: ReviewResult;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      review: {
        address,
        review
      }
    }, fee, memo, funds);
  };
}